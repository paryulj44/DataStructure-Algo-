ques :- https://leetcode.com/problems/binary-tree-right-side-view/description/

/* Logic used here is reverse level order traversal*/
 public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root == null) return res;
        q.add(root);
        while(q.size() != 0){
            int counter = q.size();
            res.add(q.peek().val);
            while(counter-- > 0){
                TreeNode curr = q.remove();
                if(curr.right != null) q.add(curr.right);
                if(curr.left != null) q.add(curr.left);
            }
        }
        return res;
    }
    
    
  // recursive approach
  //help link :- https://leetcode.com/problems/binary-tree-right-side-view/solutions/56178/simple-java-solution-w-recursion-2ms/
  public List<Integer> rightSideView(TreeNode root) {
        ArrayList list = new ArrayList();
        rightSideView(root, 0, list);
        
        return list;
    }
    
    public void rightSideView(TreeNode root, int level, ArrayList list) {
        if(root == null) return;

        if(list.size() == level)
            list.add(root.val);

        rightSideView(root.right, level + 1, list);
        rightSideView(root.left, level + 1, list);
    }
   
